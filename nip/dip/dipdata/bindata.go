// Code generated by go-bindata.
// sources:
// dip_data.json
// DO NOT EDIT!

package dipdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dip_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x9c\xc7\x8e\x23\x39\xb3\xef\xdf\xa5\xd6\xb3\x20\x83\x61\xc8\xd9\xc9\xa6\x20\x93\x90\x77\x07\x07\x17\xf2\x0e\xa9\x94\x4d\x99\x83\xef\xdd\x2f\xb2\xbf\xcd\x54\x53\x33\xe8\xec\x2a\xcd\xa6\x17\xbd\xa8\xa0\xc8\x60\xfc\x7f\x61\x98\xff\xf3\x7f\x1f\xe7\xcb\xe4\x74\xf9\x7f\xeb\xc5\x66\xb5\xbe\x7c\xfc\xf9\x01\x46\x89\x52\xea\xe3\x8f\x8f\xc5\x7e\xfe\xd7\xff\x46\x31\xda\x7d\xfc\xf1\x91\x2c\x4e\xe7\x4d\xbc\xff\xf8\xf3\x43\x7f\xfc\xf1\x31\xdf\x1c\xce\x1f\x7f\xfe\xcf\xff\x7d\x4c\xe6\xf3\xd3\xe2\x7c\xfe\xf8\xf3\x63\xaf\x07\x8f\xf5\x3e\xd9\xe7\xfb\xe5\x47\x39\x30\xc1\x34\x91\x4b\xb9\xb9\x71\xc9\xf0\xd9\x1d\xe4\x8a\x71\xac\xd7\x1f\x7f\x7c\x9c\x16\xb7\xc9\x69\xfe\xf1\xe7\x87\x35\x8a\xad\x12\x03\xe2\xd0\xda\x8f\x3f\x3e\x66\xf1\xfe\x72\x9a\xcc\x2e\x3f\xfe\xd4\x4d\xf7\xc6\xb0\x1a\xac\x9b\x0b\x3e\x1e\xec\xb4\xde\xc6\xdb\x79\x49\x20\x54\x2d\x6c\xf5\x3c\x2c\xe8\x8f\xff\xfc\xf1\xd9\xf8\x78\xfc\x9c\x2c\x87\xf3\x6b\xa7\xbb\xc6\xe2\xb1\xb9\x5d\x62\xe3\x51\x95\x18\x87\x73\x28\xd9\x52\x69\x88\x7f\x35\xae\xc9\x38\x8b\xc2\x04\x80\x0a\x58\x6b\xf8\x79\x01\x0f\xe3\x68\x3d\x18\x0c\xfb\xbd\xdb\x53\xe6\x83\x40\xa6\xdb\x6d\xf7\x74\x3d\xed\x96\xc5\x55\x38\x5d\xaf\xf7\xde\x02\xfa\x93\xf5\x79\xfe\x18\x37\x16\xab\x53\xff\xe4\x6e\x53\x2e\x46\xb3\xf5\xa6\x39\x29\xed\xe7\xb5\x71\xbc\x18\x2e\x3e\x2d\x00\xb4\xb2\x46\x39\x83\x96\x01\x04\xc1\x80\xf1\xd6\xb0\xa7\xf2\xec\xb2\xdb\xde\xe1\x90\x93\x4d\x7d\x68\x4f\xab\xf6\xa3\x30\x91\x7e\x6d\xb3\x0f\xca\xe1\xc2\x55\xbc\x35\xcc\x8f\x85\xfa\xac\x53\x8d\x4b\x2d\x08\x26\x8f\x71\xa9\x7d\x68\x55\xc6\xf9\xda\xb4\x3b\xdd\x9f\x4e\xab\xda\xe0\xf8\xd7\x35\x08\x22\x3b\xb0\x6c\x1d\x6a\x65\x59\x7e\xb6\x0f\xb0\xb4\xfd\x5a\xd5\x3c\xa2\xe7\x21\x57\xc1\xcd\x78\x50\xad\xf7\x4a\xc3\x46\xbe\xd0\x4d\x78\x36\xed\x94\x9d\x67\xbf\x6b\x9d\x5e\xca\x33\x17\xac\xeb\xa7\xc7\x1a\x28\x8e\x76\xf7\xdd\xf9\xd2\x3b\x1f\x0b\xdb\x7a\x54\x85\xe0\xaf\xf6\xd5\xcf\xbf\x77\xbd\x19\x04\x52\x58\xd8\xca\xba\x3b\xa9\x06\xcf\x4e\x35\xce\x4d\xaa\xee\xa6\x0b\xd5\xb9\x14\x63\x38\x45\x9e\xbd\x61\xa9\x71\x4f\x1e\x8b\xe3\x85\x3a\xc5\xf1\x61\xb6\x5e\xde\x72\xed\xc9\xb0\xd7\xa4\xd2\x62\x3c\x8a\x2c\x27\x7f\xb5\x67\x58\xb1\x06\x23\x4a\x2b\x05\xce\x8a\xd6\x0a\x7f\x5e\xc2\xb3\x17\x1e\x17\xf9\x66\x72\x7e\x9c\x6e\xf4\xbc\x1f\x5c\x54\x9b\x15\xe7\xf5\xee\xf6\x3a\x29\xd5\xe5\x6c\xfc\x9f\x1c\x76\xae\x51\xb1\xdc\x45\x37\x88\xe2\xdd\xc8\xf0\xaa\x80\x70\xbf\x95\xef\x87\x53\xa5\x77\xba\xb4\x86\xdd\x4f\x4e\xef\x94\x73\x84\xe9\x61\x6b\x6d\xc5\xa2\xb7\x07\xcb\xe6\xb4\xb0\x2a\x40\x70\xc1\x5c\x7e\x76\x9f\x2f\xf2\xfd\xe9\xa8\x99\x70\xb5\x12\xf6\xab\x55\x08\xf8\xe8\x2d\xa0\x7c\x8a\x72\xb7\x7c\x6d\x76\xe2\x72\x67\x50\xd7\x61\xb8\x3e\xe6\x81\xdb\xad\xc7\x22\x4e\x6e\xc9\x7e\x76\xfb\xe4\x77\xca\x31\x0a\x5b\x26\x31\xa0\x85\x90\xc1\xdb\x83\x47\xa1\x57\x28\x17\x0e\xf5\xe7\x76\x04\x25\xd9\xe4\x4b\xf9\xf0\xd2\x1a\xcd\xa2\x6b\x3d\xff\x6c\xc5\x8d\x7b\xde\x3f\xf6\xf0\xe4\x82\x6a\x94\x2f\xd6\xc6\xe5\xd2\x79\xa7\x83\x42\x69\x7a\x5d\x5f\x1b\xb5\x69\x99\x3a\xcb\xee\x6e\xf4\x69\x09\x4e\x29\xeb\x44\x1c\xa1\x38\xa5\xb5\x16\x25\xda\xf0\xe7\x55\x7c\xfc\xe7\x7f\x53\x23\x5e\x90\x42\x31\xf0\x22\x48\x59\x61\xf3\x8b\x41\x2a\x53\x9c\x00\xa5\x2c\x33\xb2\x21\x36\x8c\xe8\xc0\x0b\x54\xd9\xe3\xc4\x5c\x37\x0a\xa3\xf9\x34\xa8\x4c\x6a\xab\x4b\x51\x2f\x6b\xdb\xfa\xe9\x34\x9a\x4f\x47\xb2\xaa\xe6\xce\xe5\xf3\xf2\x93\xc3\x58\x40\x07\xca\x73\x93\xa3\x50\x6c\x06\x7a\xb2\x8b\xa4\xe2\x8e\xe5\xe9\xbd\x15\x94\x7b\x8f\x95\x4c\xda\x1c\x9b\xeb\x7a\x38\xf1\xc3\xd3\xb4\x19\x9d\xa2\xeb\xb1\xb0\xaf\xd1\x65\x59\x1e\xc9\x4e\xb6\xb5\x4d\x45\xc7\x4d\x5c\x57\xb6\x95\xf3\x67\x37\x41\x16\xe7\x10\x91\xc1\xfc\x7c\x34\x7b\xbd\xcb\x4d\x06\xcf\x49\xb9\x35\x29\xd8\x51\xee\x7e\x88\x30\x69\x1e\xf3\x70\xc3\xdb\xc3\x04\x8d\xa8\xb2\x23\xcf\x78\x3b\x47\x0b\x5d\x18\xe4\x2b\xcd\x65\xf0\x78\x96\x56\xab\x47\x2b\xbc\x0e\xe1\x1c\x84\xb4\x3a\xae\xce\xa7\xc1\x5f\x8d\xb3\x73\x8c\x8a\x34\x90\x1f\x96\x77\xe8\x0e\x0f\xd8\x47\xf5\x7b\x79\x77\x5e\x14\x86\x47\x9b\x94\xaf\x8f\x4b\xc3\x44\xb7\xc6\x7a\x53\xed\xfb\xdb\x9d\xc9\xb4\x33\xc2\x40\x06\x34\xfa\xd1\x50\x5f\xb6\xcf\x42\xad\x9f\x93\xce\xe3\x3a\xb2\x58\x34\xe3\x5b\xa3\x10\x1e\xa2\xb0\x37\xd7\x8b\xe9\xb9\xb2\xfa\xe2\xaf\x66\xa5\x9d\x55\x8c\xda\x77\xb2\xf9\xe9\x5e\x8b\xb1\xb6\x6f\x4f\x06\xe7\x7d\x7d\x52\xd5\xe3\xfd\x0e\x9f\x53\xe6\xb0\xde\xa6\x70\x3e\x8b\x3d\xd3\xa5\x38\x3c\x57\xc3\x61\xa0\x2f\xa1\x79\xba\x53\xb2\xbd\x35\x6b\x71\x7e\x38\xad\x36\x8e\xb9\x6d\x54\xea\x14\x3e\xab\xa1\x56\x62\x34\x90\x05\x26\xf6\x7c\x6d\xf5\x5c\xaf\xb1\x57\x3b\x04\xcf\x72\x5c\x19\x34\x4a\xeb\x0b\x5d\x86\xd5\xf6\x82\xa4\x3a\xe7\xce\xac\x30\xff\x9a\x14\x32\x01\x3b\x05\x06\x9d\x12\xf5\xc2\xdb\xde\xac\x82\xa0\x84\x44\x0c\x1b\x51\x42\xa8\x40\xe8\x1b\x74\x30\xd3\xc9\x1b\xa7\x8d\x18\xd4\xac\x8c\xf5\x82\xf1\xe6\xba\x18\xe5\x8f\xb5\x4d\x6b\x1d\x1f\x0b\xf1\x34\x89\xf2\xb9\xc6\x3e\x07\x8f\xf6\x34\xf7\x08\x4b\xd3\xae\x78\xb6\x83\xc5\x2c\x1c\xb5\xaf\xdb\x53\x75\x78\xe8\x97\xdb\xed\xfa\xae\xc8\xc9\x38\x8a\x36\x72\x1b\x0f\x93\x00\x2e\x9f\x7e\xbd\xe6\x14\x40\xd8\x58\x26\x03\x8e\x2c\x28\xcf\xfb\xa2\xc3\x2a\xdc\x70\xad\x36\xef\x3c\x4f\xb2\xa1\xc6\x44\xaa\xe7\x80\x1e\xcd\x91\xdb\xed\x97\xae\xb2\xf8\xe2\x12\x2c\x3a\x26\x74\xce\x29\x0b\x0a\x81\xc9\xbf\x7b\xfa\x90\x2b\xf6\x64\xbb\x3f\x25\x87\xe6\x73\x36\xb8\x9e\x83\xdd\x64\xf3\x1c\xc7\x83\x55\xef\x71\x6b\xb4\x83\xc6\xe8\x6b\x4b\xd0\x5a\xa5\x24\xa4\x95\x7f\xf8\x3a\x5a\x0d\x77\xcb\x5e\xed\xb4\xab\x76\xc7\xed\x7e\xbe\x5a\xb6\x14\xf7\x4e\xc7\x42\x42\x8d\xc6\x3c\x89\xcf\xfe\xe1\x67\x33\x2d\x62\x48\xc8\x69\x31\x40\xce\x30\x18\x1f\x4a\xe2\x69\x4f\xe3\x92\x0b\x07\x1c\x24\xf2\xcc\x85\xfd\xe9\x25\x1a\xd6\xc2\xdd\xa1\x56\x38\xb6\x8a\xab\x62\xc3\xbf\x01\x65\xc8\x85\x01\x2e\x6e\xcf\x56\x12\x84\xd5\x55\x52\x75\xb7\x72\x21\x31\xc5\x9d\x14\x2a\x87\x38\x57\xff\xe4\x7f\xc4\x62\x48\x81\xbf\xed\x2b\xdb\x79\x34\xbb\xed\x62\xfb\xe6\x2a\xdb\x53\x6f\xd9\xba\x0f\xf2\xbb\xe9\xe9\x3a\x3e\x94\x5c\xf1\x1a\xae\xaf\x9e\xe1\x4c\x29\x00\x59\x52\xda\xb1\x63\x22\x6b\x9d\xf3\xcc\x67\x4f\x02\xb2\xdd\x3b\x70\x8a\x52\x18\xf1\x75\x06\xb4\x83\x0d\xce\x47\xf5\xda\x64\xd0\x5a\xde\xdb\x87\x5a\xb0\xb7\xb7\xdd\x68\x75\x2a\x1c\xc3\xb9\x1e\x3b\xfe\x1a\xfa\x02\x59\xa5\x98\x14\xb0\x42\xef\xbe\xbd\x19\x83\x41\x03\x52\x7a\xd5\x0d\x91\x26\xd1\x44\x7e\xd4\xc9\x8e\xc1\x95\xc2\x61\xa9\x87\xd7\xc3\x66\x8a\x89\x3b\x54\xa2\x96\x43\xaa\x36\x86\xd3\x11\xf5\xe3\xe6\x39\xac\xe4\xff\x91\xfc\x8f\xad\x75\xf1\x79\xbe\xe5\x0e\x5b\xea\x44\xed\x53\xd8\xca\x87\x73\xde\x77\xb6\xc7\xc9\xe4\x18\x45\xd1\x78\xf3\x55\xea\x15\xd2\x56\x3b\x46\x63\x94\x62\xad\x5e\xec\xfa\xfb\xa9\x57\xbb\x1f\x64\xa1\x48\xb3\x25\x44\x46\xcf\xef\xfe\x8e\x7a\xad\x30\xfa\xd4\x8b\x20\x8e\x7e\x91\x7a\xb3\xd1\x1f\x69\x01\x78\x11\x0f\xb2\x83\x5f\x19\x87\xed\xb8\xc8\xdd\xcb\x90\x36\xb3\xd5\xf9\x36\x1f\xf4\xb0\x55\xee\xcd\x60\xd8\xdc\xb6\x5b\x05\xba\x7e\xde\x23\x06\xeb\xc8\x09\x7a\x0e\x79\x31\x8d\x71\xaf\x3d\xa6\x7d\x7f\x1d\xce\xbb\xc5\x29\xc8\xb5\x91\x54\xc3\x60\x79\xcd\x3d\x0b\xbb\x99\x7e\x7c\xad\x1e\x80\x08\x0e\x9c\x03\x51\xda\x28\x25\x3e\x84\x64\xc7\xfc\x4c\x04\x66\xc8\x39\xe3\xb9\xe4\xdd\xe1\xf3\x88\x4b\x28\xeb\x73\x6b\xd8\xef\x57\x82\x48\x6a\x43\xd8\x37\xef\xcb\xb8\x68\xcf\x9d\x9e\x7f\x2b\x32\x05\x02\x8b\x9a\x9d\x30\x32\x69\xb4\xa4\xd5\x0b\xe9\xcf\x1e\x07\x82\x69\xbd\x76\x34\x81\x8b\x03\xb1\xe1\xf2\x8e\x50\x79\xee\x3a\xb9\x5c\xfe\xd6\x3f\x34\xe3\x71\x5c\x90\x4f\x02\x20\x5a\xc0\x19\xfb\x42\x76\x97\x8b\xb6\x89\x16\x97\xd6\xdd\x75\x7a\xf8\xac\x96\xf6\x54\x3e\x0c\x92\x7b\xfb\x78\xe9\x45\xd7\x4b\x1b\x7c\xc5\x1f\x1e\x4a\x34\x0c\x07\x9b\x5b\x7f\xdf\x32\x8f\xed\xec\x72\x0f\xfb\x45\xf3\x48\xa2\x4e\x30\x6c\x6e\xed\x3a\xf8\xa9\xfe\xc2\xe0\x8c\x72\x08\x80\xe0\xc4\xbd\x20\x2f\x5e\xf6\xc7\xeb\x92\x35\xe7\xc5\xa5\xd5\x4a\x1a\x97\x6a\xbc\xad\xdb\xeb\xa5\xd6\xde\x55\x2a\xfd\x70\x74\xf8\x9a\x04\x18\xb2\x1a\x11\x10\xd9\x58\x05\x86\xbf\x41\x06\xb2\x72\x2f\x0b\x8b\xb6\x06\x44\x29\xd2\x7e\x2d\xe2\x37\xb8\x37\x1b\xfa\x00\x59\x0b\xce\x8a\x51\x56\x81\x08\x2a\xed\xdd\xbb\x37\xb3\xa7\xb3\x0e\x8d\x23\x6d\x45\x3b\x93\x86\x64\xe5\xa7\xda\xd9\xd9\x33\x9b\x27\x6a\xad\xd2\x70\xeb\x14\x10\x58\xcf\xfa\x75\xfd\x28\x0e\x1f\xfb\x9d\x1e\x07\xc5\xca\x65\xc3\xc9\x79\x57\xae\x15\x9e\xb3\x7d\x21\x98\x5e\xcb\xcb\xaf\x6e\x80\x21\x44\xd4\xca\x68\x30\x29\x83\x92\x58\xbf\x1e\x94\x1d\x3f\xff\x6d\x18\x18\x36\x36\xc7\xfa\xac\xab\x27\xb3\xda\xfa\x60\x0e\x05\x92\xfc\xaa\x34\xdb\xf5\xb7\xab\x6e\x29\xd7\x9d\xd9\xfe\xe7\x58\x8f\x06\x81\x45\xb1\x22\x4e\x13\x6e\x6f\xcb\x1b\xfd\xc9\xb5\x72\x1c\x5d\x47\xeb\xfd\x60\x5a\xc1\x42\x6f\x70\x0e\xf3\x8b\xc2\x0d\x66\xe7\x41\xb3\x63\xbf\x58\xde\x00\xf1\x60\x73\xfb\x2c\xca\xe5\x56\x9e\xb7\x1f\x49\xf3\x36\x6c\xb2\x2e\xce\xf3\x9b\xfd\x30\xe2\x7a\x65\x15\x3f\x2f\xd3\xaf\xd1\x8f\xd1\x9a\x35\x68\x30\xda\x10\x11\x1a\xf2\xa3\x6d\x76\xf8\xc9\x04\xfa\x4e\x81\x46\x6d\x44\x0b\x22\x90\x77\xc9\xb3\x73\x7e\x66\xf4\x62\x48\x13\x3c\x20\xcb\x16\x90\xd2\x48\xa3\x7e\x09\xbd\x52\xc6\xe2\x17\xe8\xc5\x16\xe4\x17\xd1\x2b\x13\x08\x80\xb2\x5a\x3b\x07\xc0\xd6\x8f\x05\xf7\xc1\xa8\x33\x76\x97\x27\x8d\x3b\x9d\xea\xf8\x1a\xac\xed\x82\x73\xfb\x61\x6d\xd0\xbd\x76\xf2\xf5\x5a\x69\xf8\x35\xc7\xf4\xec\x25\xd7\x71\x70\x1d\xcd\x42\x0a\x3b\xb3\xf6\x99\x76\x26\x77\xde\x94\xe9\x62\xee\x61\x59\x06\x3b\xd4\x7e\xe4\xcb\xe4\x97\x40\x8e\x8c\x90\x11\xeb\x8c\x36\x16\xfd\x06\x48\x76\xb7\xcc\x58\xfc\x10\x26\x93\xaa\x9f\xd5\xc6\x38\xf7\xe2\x62\x64\x8f\x7d\x99\x56\x90\x02\x40\x1a\x84\x48\x39\x71\x4e\x2b\x3f\x25\x78\xbb\x04\x6a\x48\xf5\x87\x85\x1d\x02\x82\x86\x97\x15\xdf\xec\x1a\x98\x89\x45\xf4\x7f\x37\x81\xf9\x07\x95\x21\x7a\x22\xfc\x6e\x14\xf1\x4b\xae\x9b\x35\x55\x76\x8b\x59\x75\xeb\xcc\xe3\x6e\x92\xca\xe5\x31\x6d\xdf\xe3\xb2\xed\x95\x96\xf3\xdd\xf9\xde\x78\x21\x42\x59\x54\x1f\xd1\x39\x95\x82\x97\x36\x7e\xb2\x93\x5d\xf3\x33\x71\xbf\x56\xc8\x56\x93\x20\x1b\x65\xd3\xcd\xf6\x25\xf0\xcd\xdc\xaf\x15\x1a\x6b\x15\x8b\xf1\x37\xfe\xdd\xe0\xcf\xa4\x00\x05\x8c\x56\x62\x5f\xe1\xde\x9b\xb1\x9f\x85\x88\x34\x59\x25\x16\xc8\x2f\x79\x65\x87\xfe\x4c\x42\x6c\x1c\xa7\x8c\xc7\xca\xf8\xa1\xee\xfd\x2a\xac\x1c\x38\x03\x8a\x85\x51\x81\x30\x6a\xfb\x33\x0b\xfc\x9d\x0a\xb3\xfd\x2f\x1a\x7f\x56\x61\x52\x96\xdc\x2f\xaa\x70\x58\x9d\x54\xda\xc3\xc3\x02\xdd\x72\xe6\x6c\x70\xb9\xde\xef\xa3\x7e\xf9\x71\xd4\xf7\xf3\xa8\x50\xb9\xbb\xf9\xe7\x02\x88\x63\x0b\xee\x45\x2b\xa4\x3c\x2d\xe5\xcc\xcc\x0e\x78\x99\xab\xac\x4a\xeb\x42\x38\x8a\x47\xf9\xe2\x23\x94\x6d\x21\x8c\x02\xe9\x7e\xf1\x78\xc8\x38\x12\x12\x16\xbf\x08\x9c\xfd\x78\xb2\x05\x85\x34\x11\xd7\x86\x8c\xa0\x31\xf4\xdf\x5c\xe8\xeb\x51\x21\x63\x4e\x0e\xd6\x18\x46\x2b\xc8\xe8\xf8\x5f\xbf\x9a\xa9\x16\x3b\xd4\x64\x19\xd3\x64\xf0\x1b\xc6\x13\xb2\xa5\x62\xac\xbd\xd6\x57\x39\xb9\xf4\x38\x58\x50\xc5\xdc\x93\x4e\xf1\xf6\x5c\x2c\x9b\xdb\x46\x73\x41\x55\x5d\xdf\x75\x82\xbc\xdf\x79\xcb\xb4\xe1\x86\x49\x8c\x42\x30\xd6\x59\xad\xe1\x1b\x72\xcf\x8c\xaa\xaf\xd1\x20\xa3\x60\xaa\x47\x2f\x3a\xae\x6f\x16\x7d\x6b\x45\x31\x80\xd1\xd6\x58\xd2\x6c\xcd\x8b\x71\x8c\x37\x37\x9e\x98\x2d\xa3\x51\xe4\x48\x59\x20\x46\x54\x3e\x04\x67\xe7\xbf\x4c\x14\x8e\xc6\xa0\x21\x48\xe3\x9d\xd0\x8b\x21\xa4\xec\x0c\x9e\xad\xf7\xac\x95\x02\x16\xed\x2c\x02\x88\x7e\xb1\x80\xec\x59\x4f\x36\x2f\x50\xa8\x51\xb1\x33\xc0\x4a\x01\x90\xf8\xa2\x9c\x3d\x09\xc8\x94\x77\x79\xd7\xfe\x86\xb9\x53\x7d\x1f\xe1\x31\x58\x6e\x8b\xfd\x5e\x90\xbb\x87\x9d\x78\x74\x6f\x42\xb2\xbc\x05\xcb\x2a\xf9\xec\x99\x4d\x89\xad\x73\xa2\x91\x9d\xb3\xc4\xa9\x2a\x63\x7a\x13\xf1\x97\x94\x98\x94\xe5\x17\x53\x82\x84\xd6\xfd\xea\x94\x60\x36\x4e\x06\xc5\x8e\x7f\xd4\xa7\xbc\x63\xc9\x1e\x9e\x32\x1d\x0b\x81\xb1\xa2\x5e\xcc\x81\x3c\x6f\xfd\xd6\x32\x18\x63\x0d\x20\x69\xe5\x0e\xd8\x29\x4e\x2b\xfb\x0d\xaf\x1b\xae\xb9\x59\xd8\xa7\xef\x0d\x99\x18\x40\x83\x21\x24\xd2\xd6\xaf\xc6\x67\x47\x80\x4c\x57\xd1\xfe\xa8\xc7\xe2\x0b\xf6\xc8\x7e\x05\x27\x74\xb9\xe7\xdd\xae\xbb\xeb\xc1\x76\x7a\x5c\xd6\xeb\xa5\x43\xa3\x16\x8e\x07\xc5\x61\xbd\x56\xdf\x74\x4e\xff\x3c\x08\xb8\x5b\xd4\xf4\xb6\xdf\x19\xc4\xb1\x4b\x9a\xd3\xe9\xa1\x4a\xba\x76\xa8\xb4\xa5\x75\x09\xbb\xd7\xcd\x62\xeb\x8f\x7c\x64\x4b\x79\x2d\x5b\x50\xe9\xc6\xb1\x76\x46\xa3\x7d\x31\xd7\xf5\x1b\x3d\xf7\x2c\xda\x67\x34\xb2\x95\x1f\x1d\x88\x34\xf6\xf8\x0d\xe8\xec\xda\x97\xa9\xc5\x67\x94\x58\xcd\xfc\x0d\x1d\xbe\x6c\x2d\x27\xc7\xc6\x88\x66\xd0\x82\x0c\x1a\xec\xb7\xa4\x9e\x59\xce\x9e\xd8\x59\x54\x02\x28\xc6\x38\x71\xf4\x6a\xc8\xec\xcd\xa2\x6f\xd1\x89\x38\xad\xb5\x23\xa4\x34\x9c\xbe\x48\x34\xb2\x8b\x7e\x26\xd4\x25\xd4\xda\x80\x4e\x93\x41\xf1\x8a\x3d\xbf\x31\x7f\x90\x09\xf3\x15\x2a\x86\xd4\x0f\x98\x84\x5f\x6c\x7f\x76\xcc\xcf\xd4\x6f\x10\x42\x61\x52\xa2\x9d\xb2\xf6\x45\x96\xf3\xe6\x59\x04\xd0\x9a\xc8\x1a\x23\x4e\x14\x1a\xeb\x09\xef\xbf\x33\x7f\x6b\x8c\x71\xa8\x14\xa6\x97\x40\x80\xbd\xd6\xef\xdf\xc9\x7f\x1a\x2b\x5f\xc8\xbf\x75\xf0\xab\xf3\xb7\xd9\xc4\x90\x94\x20\x88\x88\x57\x29\xf8\x1d\x35\x0c\x86\xb9\x7b\xcb\xd4\xe0\xda\xbb\x2d\x86\x61\x61\x5c\x29\xe9\x7d\x6c\x9b\x92\x5f\xe4\x9d\x5d\x37\x73\xd1\xe7\x42\x0d\xa6\x37\x84\xb5\xf3\x4b\x25\xdb\x36\x2e\x13\x7e\xd6\x57\xb7\x62\x70\xdf\x46\x9d\xa0\xdc\x3e\x8f\x1a\xdc\xa0\x55\x54\xbb\xc4\xc0\xb3\x2f\xe6\xe2\xda\x09\x1b\x22\x36\x56\xc8\x19\x97\xc2\xcf\x37\x24\xe3\xd9\x22\x04\x18\x21\x74\xa8\xac\x68\x14\xf2\xed\xbf\x39\x4a\x80\xb0\x80\x72\x68\x5e\x0c\xe9\x67\x0f\x10\xd9\xf2\x52\x65\xd8\x22\x29\x4c\xff\x01\xf2\xd8\xe0\xdd\x79\xa9\x10\x38\x65\x59\x3b\xad\x95\xd1\x9a\xe0\x45\x90\x7a\x77\x53\xc0\x68\x2d\x92\x5e\x3e\xa3\xd8\xb9\x74\x3f\xfc\x89\xa9\xec\x32\xf9\xb5\x76\xd4\xa1\xbe\xe3\xe5\xa8\x9b\xf4\x9a\x15\xa4\xcd\xda\x0d\x96\x34\x8e\x3b\xae\x7d\xce\x95\x5a\xf7\x79\x73\x31\xf8\x9a\xc7\xfd\xdb\xad\x77\x64\x52\xc6\xa0\x23\xcd\x44\x06\x41\xf9\x0d\xbf\xec\x10\x9a\x49\x8a\x58\x91\xb1\x46\x1b\x25\x0e\x35\x23\x7c\xc7\x53\x90\x6c\xc9\xbf\x38\x2d\x8a\x8d\xb3\xfe\xac\x59\xf6\x9c\x23\x63\x12\x6c\x91\x99\x00\x59\x33\x28\x67\x0d\x18\xf4\x66\xdf\xff\x4e\x05\xad\x83\x17\xf3\x78\x0c\x8e\x7e\x75\x1e\x2f\xdb\x53\x39\x4b\xc8\x22\xca\xf9\xac\xf0\x66\x11\x44\x16\xf2\x87\x72\xb2\xcb\xdf\xd7\x2e\xfe\xa6\xb5\xcd\xdd\x96\xab\x51\xee\x3e\x24\xd8\xcc\x8f\xb7\xf5\x78\xd7\x2e\x2e\x2e\x7a\xb9\x5a\x4c\xe6\x85\x89\xfd\x9a\x17\xfe\x38\xb3\x2f\xbe\x78\xc8\x58\x72\x63\x71\x6c\x39\xa5\x30\x8d\xf0\x62\xec\xe9\x37\x1a\xdf\x59\xfa\x6f\x00\xe6\xeb\x6d\xb7\x4c\x38\xa1\x9d\x12\x50\xc0\xce\x29\x12\x76\xe0\xbf\x36\x7c\xfb\xd8\xb3\x80\x23\x11\x22\x05\x9a\x01\x95\x85\x17\x03\x07\x6f\xee\x70\x80\x25\x12\x07\x8a\x01\x44\x81\xbc\x9a\xbc\x5e\x77\x07\xa3\xf1\xa9\x31\xcc\xef\x9e\xc7\x07\x54\xc3\x61\x34\x5e\x94\xa7\xa5\xed\x7d\xb0\xdf\xde\xeb\x51\xab\xe3\xbb\xde\x61\xfd\x8c\xc3\x47\x05\x93\xd6\x29\xff\xec\x6f\x74\xa8\xa7\xd7\x66\x9c\xc8\x23\x3f\x4f\xca\xd5\x46\xed\xb3\xb0\x3b\xb2\xa4\x45\x69\x85\x3f\x1e\x02\xfe\x6c\xff\xb4\x7f\xc0\x74\xd3\xbf\x95\xca\xf5\xe7\xa1\x17\x4f\xb7\x83\x28\x80\xf1\x66\x0e\xf5\x79\xbe\xb4\xb9\x59\x3f\xec\x66\x6b\x39\x28\x60\x65\x53\xac\xd3\x1a\x94\x75\x9e\xe7\x2f\xc6\x16\x9e\xfb\x6d\xfe\x56\x9c\x6e\x77\xa3\xd2\x49\x5a\xab\xe1\x72\xdc\xce\x9f\x8f\xcd\xf1\xae\xbe\xa8\xfa\x83\xf7\x99\xec\xa7\xe7\x6f\x9d\xb6\xca\x8a\xc5\x17\x05\x7f\x80\x59\xf7\x71\xa9\xb7\x17\x8b\xc0\x4d\x57\x52\xbc\xc1\xae\x7f\x2a\x1d\x93\x30\x2a\x3d\xbb\xe1\x62\x7c\xf3\x1f\xd6\x65\x2b\xf8\x2b\x07\xa8\xd9\x90\x23\x44\x05\xc0\xdf\xf3\xdc\x23\x13\xde\x02\xb0\xd2\xe4\x8c\xd5\xca\x09\x0b\xdb\xef\x18\xb7\xc8\x58\x02\xb0\x56\x0c\x28\x8b\xe8\x58\x58\x59\xff\x26\x9e\x3b\xf1\x79\x3a\x9d\xe9\xa4\x7c\x5e\xec\x83\xe9\x2d\xbe\x5f\x56\xf3\xc2\x5a\xca\xc3\x6b\x69\xd6\x74\xf8\xfc\xda\x43\x5c\x0d\xc2\x8a\x59\x98\x40\xf9\x4e\x98\xfd\x11\x6e\x36\xba\x66\x67\x08\x7e\xfc\x6c\xcd\xf6\xc7\x14\xc4\xbf\xdd\x78\xd2\x0a\x35\x19\x80\x34\x1c\x6b\x10\x2b\xe8\x27\xd8\xbf\x51\x83\xca\x46\x60\xe2\x2c\x38\x47\x29\x79\x6a\xd1\xce\x29\x7f\x38\xf0\x6f\x08\x2c\x45\xad\x17\x63\x79\xcc\xce\xfe\xf2\x58\xde\x46\x76\xb5\x7c\x8d\x92\x15\x35\xf3\xcd\xc5\xfd\x12\x8e\xd6\xa5\x7e\xdc\xcc\x57\x1b\x6b\x91\xa0\x3f\xfd\x47\x24\x39\x77\xb7\xa7\x5d\xe1\xd2\xec\x96\x5b\xc1\xfc\x3c\x5b\x77\xea\x7d\xdb\x9f\x9a\xfe\xe8\xbe\xb8\xd5\xbb\xdc\xf5\xdd\xb3\x56\xca\x5d\x9e\xe5\xfb\x23\x9e\x8d\x4c\x71\xa8\x6b\x27\x6a\x45\xe3\xc2\xa2\x70\x79\x24\xf5\xd3\xac\x38\x1a\xfd\xe4\x9e\x8e\x9d\x23\xfd\xe2\x29\xc4\xb5\x12\xf5\xa6\xad\xae\x2e\x74\x2b\xad\xf2\xd1\x3d\xe6\xc9\x74\xfd\xd8\x34\x8e\x93\xd9\x3a\x6a\xd5\x2a\x9d\xe0\x6b\xfd\x07\x44\x0d\x22\xd6\xa9\xef\xa8\xb8\x54\x8f\xf3\x18\x4e\x55\x47\xb7\x30\x6a\x0f\x27\x66\xe2\xa2\xc1\xbc\x38\xde\x54\x5a\xab\xde\x36\xb8\x51\xfb\x13\x87\x11\x88\x13\x52\xa9\x4a\x2a\x71\x69\xde\xeb\x83\xd9\xb8\xd6\x4e\x30\xe8\x54\x8a\xe5\xc5\x39\xdf\x5c\x5e\x5a\xae\x31\x96\xe2\x65\x82\x55\xa4\x5c\x72\xfe\xe2\x17\x02\x94\xb2\xe8\x44\x59\x72\x36\x8d\x4e\x8e\xd8\x67\xb3\x37\x17\x5e\x34\x88\x22\x67\x8d\x25\x6b\x44\x69\x52\xfe\x34\xdc\x6f\xa0\x52\xa6\x0a\x29\x10\x19\xd6\x40\x2c\xd6\xbc\xc8\xcc\xb2\x17\x48\xb3\xe5\xc5\xe6\x67\x38\x05\xa8\x74\xa6\xa5\x42\xa1\x16\x9f\xb7\xd5\xd3\x2d\xb9\xef\xda\xd1\xac\x5e\x18\x4c\x8a\xa3\x7b\xe4\xd6\xad\xbe\x0f\x05\xd9\x06\xa4\x91\x05\x11\xac\x53\x46\x9c\x56\xdf\xc2\xe3\xe5\xe8\x5e\xcc\x4d\x96\xe1\xfa\x70\x79\xba\x19\x35\x7a\xc9\x95\x3b\xc5\x68\x13\x90\x59\x5c\x66\xd5\x73\xf7\x1f\xc3\xcb\x7d\x6f\x1a\x71\xee\x3e\x95\x4e\xbb\x74\x10\xbd\xae\x74\x67\x2d\x88\xda\xa7\xa2\x9b\xb8\xf9\x69\xdd\xf4\x05\xe8\x6b\x19\xd6\x65\x17\x6e\xe6\xc3\x83\xd6\xfd\x51\xe5\x58\xe8\x56\x57\xc3\x4e\x69\xfa\x38\xf4\x9f\x71\xf9\x3c\xae\x86\x97\xea\x17\x2b\x5a\xc0\x06\x0c\xa5\xc8\x2d\xd6\x89\x7a\xf1\xbd\x95\x37\x43\x0f\x5a\x63\x30\x45\x2e\xd4\xce\xa0\xf5\x8a\x59\xef\xae\xe9\x19\xab\x59\x59\x05\x16\xb5\x88\x4b\xb1\xc3\xaf\xa7\xbd\xb9\xa6\x07\x00\xc6\x98\x34\xc4\x3a\x43\x9a\x14\xbf\x28\x27\xbc\xfb\xad\x0b\x3b\xc5\xc8\x06\xe5\x55\xdb\x29\x73\xe6\x93\x6d\xa6\xcf\x39\x6b\x9c\x05\x64\x24\x67\x5f\xdc\xf1\xec\xb3\x7d\x99\x71\x47\x2b\x44\x60\x02\x48\x53\x61\x65\xc8\xfb\xb0\xc7\xdf\xe1\x0e\x3b\xfb\x62\xfe\x51\xb4\xd2\xbf\x3a\xff\xd8\xe9\xde\x83\x6b\x69\x3c\xd9\x2f\xba\x97\x70\x33\x8c\xfb\xf5\xa2\xed\xce\xa3\xce\x0e\x6d\xe9\xb4\x4c\xf6\x9f\xf6\x8a\x34\x91\x58\x0b\xc0\x3e\x04\x3c\xfa\xb3\xdc\x7c\x62\x36\xdb\x52\xad\xd3\xdc\x4c\xaa\xb3\xe1\x33\x3f\x33\x87\x7d\x90\xdc\x4a\xa7\x6a\xa9\xbf\xfb\xe2\x53\x11\x8d\x4e\x98\x15\xfa\x07\xf4\xe6\xe7\xe0\xde\x18\xce\xa3\x95\xb7\xdd\x80\x2b\xd3\x00\x2a\x61\x10\x94\xcc\x4c\xdf\x26\x36\x5a\x45\x7b\x53\x4b\x92\x53\xf3\x8b\x83\x47\x5a\x3b\x85\x44\x64\x4c\xea\x15\x86\xe1\xc5\x8b\x8f\x37\x3f\x3f\xd0\x86\xc5\x28\x6d\x9d\xd3\x24\xe4\x67\xa2\xd9\x23\x52\x26\xe0\x43\xb0\x6c\x09\x59\x5b\x2d\xc6\x19\xed\x37\xda\xde\xcd\x7b\x5a\x91\xb5\x16\xad\x41\x22\x6d\x90\x9c\xf8\xca\xf4\x6e\xde\x4b\x65\x81\x2c\xb3\x11\x11\xe2\x6f\x29\x8c\x65\xa3\x1f\xa3\xb4\x22\x56\x6c\xd0\x29\x74\xea\xc5\x53\xd4\xec\xf8\x93\x49\x9c\x19\x80\x58\xa3\x05\x40\xf4\xb3\xf1\xdf\xf9\x0c\x59\xc6\x4e\x00\x69\xcb\xc2\xe0\x9c\x75\x28\x16\xd8\x1f\x08\xfa\x9b\xc0\x2c\x5a\xc1\x8b\x71\x38\x21\x45\x6f\xf9\x68\x1e\x21\x3a\x49\xa9\xfc\x3b\x86\xc3\x26\x3d\xcc\x6f\x2e\xd5\x66\xdc\x3a\x1d\xec\xa5\xc6\xd3\xcb\x6d\x7e\x7d\x96\x8e\xdb\x38\x78\xe2\xb3\x54\x38\x7f\xee\xc4\x33\x80\x85\x54\xb8\x5f\x9c\x91\x3e\xdf\x5a\x95\xf3\x7e\x53\x5f\x3a\xdd\x8f\xfa\xe3\x5e\xdd\xdd\x4c\x6d\x23\xab\x20\xd7\xd7\xda\xae\x4b\x3e\x40\x66\xeb\x54\x09\x5a\x67\x15\x6b\x40\xa3\x5f\xa4\x24\x6f\x76\x50\xa3\xac\x06\x14\x63\x85\xd0\xf1\x77\x78\x68\xb6\x17\xa3\xde\x61\x27\x11\xd0\xe0\x3c\x48\x92\xe0\xd9\x84\xa1\x2c\x26\x30\xc9\xe9\x45\x1c\x74\xf3\x7a\x79\x35\xbb\xc7\x17\xab\x43\x00\xac\x59\x81\x72\x02\x36\xa5\xf6\x17\x43\x3a\x6f\x56\x26\xb0\xca\x20\x5a\x16\x31\x64\xd9\x80\xef\x71\x6f\xd6\x26\x12\x04\x56\x4a\x94\x79\x35\x89\x99\x5d\x97\xb2\x0d\x5f\x68\x66\x0b\xa0\x0c\x0a\x8b\x95\x6f\x19\xbe\xc8\x56\x07\x61\x07\xce\x50\x8a\x9d\x0e\x58\x1b\x78\xd1\x1b\xfe\x0d\x5d\xcc\x18\x96\xd9\xb2\x68\xb6\xac\x7e\x3c\x8d\x44\x03\xde\xa7\xd1\xd2\xb0\xfc\xbf\xff\x3f\x00\x00\xff\xff\x7d\xba\x70\xfc\xcd\x54\x00\x00")

func dip_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dip_dataJson,
		"dip_data.json",
	)
}

func dip_dataJson() (*asset, error) {
	bytes, err := dip_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dip_data.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dip_data.json": dip_dataJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"dip_data.json": &bintree{dip_dataJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
